#include "Test_imito.h"

#define UC unsigned char

bool Test_imito::result_of_testing(bool* mass)
{
  bool result = true;

  if (!(mass[0] = test_R()))
    result = false;
  if (!(mass[0x1] = test_MSBR()))  
    result = false;
  if (!(mass[0x2] = test_K1()))
    result = false;
  if (!(mass[0x3] = test_MSBK1()))
    result = false;

  return result;
}

bool Test_imito::result_of_testing()
{
  bool mass[0x10];

  return result_of_testing(mass);
}

bool Test_imito::test_R()
{
  UC key[0x20];

  {
    UC key_r[] =
    {
      0x88, 0x99, 0xaa, 0xbb,
      0xcc, 0xdd, 0xee, 0xff,
      0x00, 0x11, 0x22, 0x33,
      0x44, 0x55, 0x66, 0x77,
      0xfe, 0xdc, 0xba, 0x98,
      0x76, 0x54, 0x32, 0x10,
      0x01, 0x23, 0x45, 0x67,
      0x89, 0xab, 0xcd, 0xef
    };

    for (UC k = 0; k < 0x20; ++k)
      key[k] = key_r[0x1f - k];
  }

  push_key(key);

  UC R[0x10] = { 0 };

  Give_ST(R);

  UC R_con[] =
  {
    0x94, 0xbe, 0xc1, 0x5e,
    0x26, 0x9c, 0xf1, 0xe5,
    0x06, 0xf0, 0x2b, 0x99,
    0x4c, 0x0a, 0x8e, 0xa0
  };

  for (UC k = 0; k < 0x10; ++k)
    if (!(R_con[k] == R[0xf - k]))
      return false;

  return true;
}

bool Test_imito::test_MSBR()
{
  UC R[0x10];

  {
    UC R_r[] =
    {
      0x94, 0xbe, 0xc1, 0x5e,
      0x26, 0x9c, 0xf1, 0xe5,
      0x06, 0xf0, 0x2b, 0x99,
      0x4c, 0x0a, 0x8e, 0xa0
    };

    for (UC k = 0; k < 0x10; ++k)
      R[k] = R_r[0xf - k];
  }

  if (!MSB(R))
    return false;

  return true;
}

bool Test_imito::test_K1()
{
  UC key[0x20];
  UC key_cons[]=
  {
      0x29, 0x7d, 0x82, 0xbc,
      0x4d, 0x39, 0xe3, 0xca,
      0x0d, 0xe0, 0x57, 0x32,
      0x98, 0x15, 0x1d, 0xc7
  };

  {
    UC key_r[] =
    {
      0x88, 0x99, 0xaa, 0xbb,
      0xcc, 0xdd, 0xee, 0xff,
      0x00, 0x11, 0x22, 0x33,
      0x44, 0x55, 0x66, 0x77,
      0xfe, 0xdc, 0xba, 0x98,
      0x76, 0x54, 0x32, 0x10,
      0x01, 0x23, 0x45, 0x67,
      0x89, 0xab, 0xcd, 0xef
    };

    for (UC k = 0; k < 0x20; ++k)
      key[k] = key_r[0x1f - k];
  }

  push_key(key);

  for (UC k = 0; k < 0x10; ++k)
    if (key_imito[k] != key_cons[0xf - k])
      return false;

  return true;
}

bool Test_imito::test_MSBK1()
{
  UC K1[0x10];

  {
    UC K1_r[] =
    {
      0x29, 0x7d, 0x82, 0xbc,
      0x4d, 0x39, 0xe3, 0xca,
      0x0d, 0xe0, 0x57, 0x32,
      0x98, 0x15, 0x1d, 0xc7
    };

    for (UC k = 0; k < 0x10; ++k)
      K1[k] = K1_r[0xf - k];
  }

  if (MSB(K1))
    return false;

  return true;
}
