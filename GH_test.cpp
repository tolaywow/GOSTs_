#include "GH_test.h"
#define UC unsigned char

GH_test::GH_test()
{
}

bool GH_test::result_of_testing(bool* mass)
{
  bool result=true;

  if (!test_S())
  {
    result = false;
    mass[0] = result;
  }
  if (!test_L())
  {
    result = false;
    mass[0x1] = result;
  }
  if (!test_keys())
  {
    result = false;
    mass[0x2] = result;
  }
  if (!test_cry())
  {
    result = false;
    mass[0x3] = result;
  }
  if (!test_X())
  {
    result = false;
    mass[0x4] = result;
  }
  if (!test_LX())
  {
    result = false;
    mass[0x5] = result;
  }
  if (!test_S_l())
  {
    result = false;
    mass[0x6] = result;
  }
  if (!test_SLX())
  {
    result = false;
    mass[0x7] = result;
  }  
  if (!test_not_cry())
  {
    result = false;
    mass[0x8] = result;
  }
  
  return result;
}

bool GH_test::result_of_testing()
{
  bool mass[0x10];
  return result_of_testing(mass);
}

bool GH_test::test_S()
{
  UC S[] =
  {
    0x00, 0x77, 0x66, 0x55,
    0x44, 0x33, 0x22, 0x11,
    0x88, 0x99, 0xaa, 0xbb,
    0xcc, 0xdd, 0xee, 0xff
  };

  UC S_top[] =
  {
    0xfc, 0x7e, 0x9a, 0x0c,
    0xea, 0xae, 0x65, 0x77,
    0xd7, 0xe8, 0x38, 0x7d,
    0x88, 0xd8, 0x6c, 0xb6
  };

  S_p(S);

  for (UC k = 0; k < 0x10; ++k)
  {
    if (S[k] != S_top[k])
    {
      return false;
    }
  }

  {
    UC S_r[0x10] =
    {
      0x55, 0x9d, 0x8d, 0xd7,
      0xbd, 0x06, 0xcb, 0xfe,
      0x7e, 0x7b, 0x26, 0x25,
      0x23, 0x28, 0x0d, 0x39
    };

    for (UC i = 0; i < 0x10; i++)
    {
      S_top[i] = S_r[0xf - i];

    }
  }

  S_p(S);

  for (UC k = 0; k < 0x10; ++k)
  {
    if (S[k] != S_top[k])
    {
      return false;
    }
  }

  {
    UC S_r[0x10] =
    {
      0x0c, 0x33, 0x22, 0xfe,
      0xd5, 0x31, 0xe4, 0x63,
      0x0d, 0x80, 0xef, 0x5c,
      0x5a, 0x81, 0xc5, 0x0b
    };

    for (UC i = 0; i < 0x10; i++)
    {
      S_top[i] = S_r[0xf - i];

    }
  }

  S_p(S);

  for (UC k = 0; k < 0x10; ++k)
  {
    if (S[k] != S_top[k])
    {
      return false;
    }
  }

  {
    UC S_r[0x10] =
    {
      0x23, 0xae, 0x65, 0x63, 0x3f,
      0x84, 0x2d, 0x29, 0xc5, 0xdf,
      0x52, 0x9c, 0x13, 0xf5, 0xac, 0xda
    };

    for (UC i = 0; i < 0x10; i++)
    {
      S_top[i] = S_r[0xf - i];

    }
  }

  S_p(S);

  for (UC k = 0; k < 0x10; ++k)
  {
    if (S[k] != S_top[k])
    {
      return false;
    }
  }

  return true;
}

bool GH_test::test_L()
{
  UC L[0x10] ={};

  L[0x1] = 0x1;

  for (UC i = 0; i < 3; i++)
  {
    UC a0 = l(L);

    for (UC i = 0; i < 0x0f; ++i)
    {
      L[i] = L[i + 0x1];
    }

    L[0x0f] = a0;
  }

  //1
  {
    UC L_top[0x10] =
    {
      0xd4, 0x56, 0x58, 0x4d,
      0xd0, 0xe3, 0xe8, 0x4c,
      0xc3, 0x16, 0x6e, 0x4b,
      0x7f, 0xa2, 0x89, 0x0d
    };

    L_p(L);

    for (UC k = 0; k < 0x10; ++k)
    {
      if (L[k] != L_top[0xf - k])
      {
        return false;
      }
    }
  }

  //2
  {
    UC L_top[0x10] =
    {
      0x79, 0xd2, 0x62, 0x21,
      0xb8, 0x7b, 0x58, 0x4c,
      0xd4, 0x2f, 0xbc, 0x4f,
      0xfe, 0xa5, 0xde, 0x9a
    };

    L_p(L);

    for (UC k = 0; k < 0x10; ++k)
    {
      if (L[k] != L_top[0xf - k])
      {
        return false;
      }
    }
  }

  //3
  {
    UC L_top[0x10] =
    {
      0x0e, 0x93, 0x69, 0x1a,
      0x0c, 0xfc, 0x60, 0x40,
      0x8b, 0x7b, 0x68, 0xf6,
      0x6b, 0x51, 0x3c, 0x13
    };

    L_p(L);

    for (UC k = 0; k < 0x10; ++k)
    {
      if (L[k] != L_top[0xf - k])
      {
        return false;
      }
    }
  }

  //4
  {
    UC L_top[0x10] =
    {
      0xe6, 0xa8, 0x09, 0x4f,
      0xee, 0x0a, 0xa2, 0x04,
      0xfd, 0x97, 0xbc, 0xb0, 
      0xb4, 0x4b, 0x85, 0x80
    };

    L_p(L);

    for (UC k = 0; k < 0x10; ++k)
    {
      if (L[k] != L_top[0xf - k])
      {
        return false;
      }
    }
  }

  return true;
}

bool GH_test::test_X()
{
  UC b[0x10];

  {
    UC b_[] =
    {
      0x7f, 0x67, 0x9d, 0x90,
      0xbe, 0xbc, 0x24, 0x30,
      0x5a, 0x46, 0x8d, 0x42,
      0xb9, 0xd4, 0xed, 0xcd
    };

    for (UC k = 0; k < 0x10; ++k)
    {
      b[k] = b_[0xf - k];
    }
  }

  UC key[0x10];

  {
    UC key_r[] = 
    {
      0x72, 0xe9, 0xdd, 0x74,
      0x16, 0xbc, 0xf4, 0x5b,
      0x75, 0x5d, 0xba, 0xa8,
      0x8e, 0x4a, 0x40, 0x43
    };

    for (UC k = 0; k < 0x10; ++k)
    {
      key[k] = key_r[0xf - k];

    }
  }

  xors(key, b);
  UC xb[] =
  {
    0x0d, 0x8e, 0x40, 0xe4,
    0xa8, 0x00, 0xd0, 0x6b,
    0x2f, 0x1b, 0x37, 0xea,
    0x37, 0x9e, 0xad, 0x8e
  };

  for (UC k = 0; k < 0x10; ++k)
    if (b[k] != xb[0xf - k])
      return false;
  
  return true;
}

bool GH_test::test_LX()
{


  UC b[0x10];

  {
    UC b_[] =
    {
      0x0d, 0x8e, 0x40, 0xe4,
      0xa8, 0x00, 0xd0, 0x6b,
      0x2f, 0x1b, 0x37, 0xea,
      0x37, 0x9e, 0xad, 0x8e
    };

    for (UC k = 0; k < 0x10; ++k)
    {
      b[k] = b_[0xf - k];
    }
  }

  L_l(b);

  UC lxb[] =
  {
    0x8a, 0x6b, 0x93, 0x0a,
    0x52, 0x21, 0x1b, 0x45,
    0xc5, 0xba, 0xa4, 0x3f,
    0xf8, 0xb9, 0x13, 0x19
  };

  for (UC k = 0; k < 0x10; ++k)
  {
    if (b[k] != lxb[0xf - k])
      return false;
  }

  return true;
}

bool GH_test::test_S_l()
{
  UC res[] =
  {
    0x76, 0xca, 0x14, 0x9e,
    0xef, 0x27, 0xd1, 0xb1,
    0x0d, 0x17, 0xe3, 0xd5,
    0xd6, 0x8e, 0x5a, 0x72
  };

  UC b[0x10];

  {
    UC b_[] =
    {
      0x8a, 0x6b, 0x93, 0x0a,
      0x52, 0x21, 0x1b, 0x45,
      0xc5, 0xba, 0xa4, 0x3f,
      0xf8, 0xb9, 0x13, 0x19
    };

    for (UC k = 0; k < 0x10; ++k)
    {
      b[k] = b_[0xf - k];
    }
  }

  S_l(b);

  for (UC k = 0; k < 0x10; ++k)
  {
    if (b[k] != res[0xf - k])
      return false;
  }

  return true;
}

bool GH_test::test_SLX()
{
  UC res[] =
  {
    0x99, 0xbb, 0x99, 0xff,
    0x99, 0xbb, 0x99, 0xff,
    0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff
  };

  UC b[0x10];

  {
    UC b_[] =
    {
      0x76, 0xca, 0x14, 0x9e,
      0xef, 0x27, 0xd1, 0xb1,
      0x0d, 0x17, 0xe3, 0xd5,
      0xd6, 0x8e, 0x5a, 0x72
    };

    for (UC k = 0; k < 0x10; ++k)
    {
      b[k] = b_[0xf - k];
    }
  }

  for (UC k = 0x8; k > 0; --k)
  {
    xors(keys[k], b);
    L_l(b);
    S_l(b);
  }

  for (UC k = 0; k < 0x10; ++k)
  {
    if (b[k] != res[0xf - k])
      return false;
  }

  return true;
}

bool GH_test::test_keys()
{  
  {
    UC key_r[] =
    {
      0x88, 0x99, 0xaa, 0xbb,
      0xcc, 0xdd, 0xee, 0xff,
      0x00, 0x11, 0x22, 0x33,
      0x44, 0x55, 0x66, 0x77,
      0xfe, 0xdc, 0xba, 0x98,
      0x76, 0x54, 0x32, 0x10,
      0x01, 0x23, 0x45, 0x67,
      0x89, 0xab, 0xcd, 0xef
    };

    for (UC k = 0; k < 0x20; ++k)
      key[k] = key_r[0x1f - k];
  }

  Form_Key();

  {
    UC ks[0xa][0x10] =
    {
      {
      0x88, 0x99, 0xaa, 0xbb,
      0xcc, 0xdd, 0xee, 0xff,
      0x00, 0x11, 0x22, 0x33,
      0x44, 0x55, 0x66, 0x77
      },
      {
      0xfe, 0xdc, 0xba, 0x98,
      0x76, 0x54, 0x32, 0x10,
      0x01, 0x23, 0x45, 0x67,
      0x89, 0xab, 0xcd, 0xef
      },
      {
      0xdb, 0x31, 0x48, 0x53,
      0x15, 0x69, 0x43, 0x43,
      0x22, 0x8d, 0x6a, 0xef,
      0x8c, 0xc7, 0x8c, 0x44 
      },
      {
      0x3d, 0x45, 0x53, 0xd8,
      0xe9, 0xcf, 0xec, 0x68,
      0x15, 0xeb, 0xad, 0xc4,
      0x0a, 0x9f, 0xfd, 0x04
      },
      {
      0x57, 0x64, 0x64, 0x68,
      0xc4, 0x4a, 0x5e, 0x28,
      0xd3, 0xe5, 0x92, 0x46,
      0xf4, 0x29, 0xf1, 0xac
      },
      {
      0xbd, 0x07, 0x94, 0x35,
      0x16, 0x5c, 0x64, 0x32,
      0xb5, 0x32, 0xe8, 0x28,
      0x34, 0xda, 0x58, 0x1b
      },
      {
      0x51, 0xe6, 0x40, 0x75,
      0x7e, 0x87, 0x45, 0xde,
      0x70, 0x57, 0x27, 0x26,
      0x5a, 0x00, 0x98, 0xb1
      },
      {
        0x5a, 0x79, 0x25, 0x01,
        0x7b, 0x9f, 0xdd, 0x3e,
        0xd7, 0x2a, 0x91, 0xa2,
        0x22, 0x86, 0xf9, 0x84
      },      
      {
        0xbb, 0x44, 0xe2, 0x53,
        0x78, 0xc7, 0x31, 0x23,
        0xa5, 0xf3, 0x2f, 0x73,
        0xcd, 0xb6, 0xe5, 0x17
      },
      {
        0x72, 0xe9, 0xdd, 0x74,
        0x16, 0xbc, 0xf4, 0x5b,
        0x75, 0x5d, 0xba, 0xa8,
        0x8e, 0x4a, 0x40, 0x43
      } 
    };

    for (UC i = 0; i < 0xa; i++)
    {
      for (UC k = 0; k < 0x10; ++k)
        if (keys[i][k] != ks[i][0xf - k])
          return false;

    }
  }

  return true;
}

bool GH_test::test_cry()
{
  UC a[] =
  {    
    0x88, 0x99, 0xaa,0xbb,
    0xcc, 0xdd, 0xee, 0xff,
    0x00, 0x77, 0x66, 0x55,
    0x44, 0x33, 0x22, 0x11
  };

  UC b_[] =
  {
    0x7f, 0x67, 0x9d, 0x90,
    0xbe, 0xbc, 0x24, 0x30,
    0x5a, 0x46, 0x8d, 0x42,
    0xb9, 0xd4, 0xed, 0xcd
  };
  
  Give_ST(a);

  for (UC k = 0; k < 0x10; ++k)  
    if (a[k] != b_[0xf - k])
      return false;
 
    return true;
}

bool GH_test::test_not_cry()
{
  UC a_[] =
  {
    0x88, 0x99, 0xaa,0xbb,
    0xcc, 0xdd, 0xee, 0xff,
    0x00, 0x77, 0x66, 0x55,
    0x44, 0x33, 0x22, 0x11
  };

  UC b[0x10];

  {
    UC b_[] =
    {
      0x7f, 0x67, 0x9d, 0x90,
      0xbe, 0xbc, 0x24, 0x30,
      0x5a, 0x46, 0x8d, 0x42,
      0xb9, 0xd4, 0xed, 0xcd
    };

    for (UC k = 0; k < 0x10; ++k)
    {
      b[k] = b_[0xf - k];
    }
  }

  Give_OT(b);

  for (UC k = 0; k < 0x10; ++k)
    if (a_[k] != b[k])
      return false;

  return true;
}

