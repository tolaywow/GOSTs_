#include "Hash512.h"

namespace H512
{
	const UI8 pi[] =
	{
			0XFC, 0XEE, 0XDD, 0X11, 0XCF, 0X6E, 0X31, 0X16,
			0XFB, 0XC4, 0XFA, 0XDA, 0X23, 0XC5, 0X04, 0X4D,
			0XE9, 0X77, 0XF0, 0XDB, 0X93, 0X2E, 0X99, 0XBA,
			0X17, 0X36, 0XF1, 0XBB, 0X14, 0XCD, 0X5F, 0XC1,
			0XF9, 0X18, 0X65, 0X5A, 0XE2, 0X5C, 0XEF, 0X21,
			0X81, 0X1C, 0X3C, 0X42, 0X8B, 0X01, 0X8E, 0X4F,
			0X05, 0X84, 0X02, 0XAE, 0XE3, 0X6A, 0X8F, 0XA0,
			0X06, 0X0B, 0XED, 0X98, 0X7F, 0XD4, 0XD3, 0X1F,
			0XEB, 0X34, 0X2C, 0X51, 0XEA, 0XC8, 0X48, 0XAB,
			0XF2, 0X2A, 0X68, 0XA2, 0XFD, 0X3A, 0XCE, 0XCC,
			0XB5, 0X70, 0X0E, 0X56, 0X08, 0X0C, 0X76, 0X12,
			0XBF, 0X72, 0X13, 0X47, 0X9C, 0XB7, 0X5D, 0X87,
			0X15, 0XA1, 0X96, 0X29, 0X10, 0X7B, 0X9A, 0XC7,
			0XF3, 0X91, 0X78, 0X6F, 0X9D, 0X9E, 0XB2, 0XB1,
			0X32, 0X75, 0X19, 0X3D, 0XFF, 0X35, 0X8A, 0X7E,
			0X6D, 0X54, 0XC6, 0X80, 0XC3, 0XBD, 0X0D, 0X57,
			0XDF, 0XF5, 0X24, 0XA9, 0X3E, 0XA8, 0X43, 0XC9,
			0XD7, 0X79, 0XD6, 0XF6, 0X7C, 0X22, 0XB9, 0X03,
			0XE0, 0X0F, 0XEC, 0XDE, 0X7A, 0X94, 0XB0, 0XBC,
			0XDC, 0XE8, 0X28, 0X50, 0X4E, 0X33, 0X0A, 0X4A,
			0XA7, 0X97, 0X60, 0X73, 0X1E, 0X00, 0X62, 0X44,
			0X1A, 0XB8, 0X38, 0X82, 0X64, 0X9F, 0X26, 0X41,
			0XAD, 0X45, 0X46, 0X92, 0X27, 0X5E, 0X55, 0X2F,
			0X8C, 0XA3, 0XA5, 0X7D, 0X69, 0XD5, 0X95, 0X3B,
			0X07, 0X58, 0XB3, 0X40, 0X86, 0XAC, 0X1D, 0XF7,
			0X30, 0X37, 0X6B, 0XE4, 0X88, 0XD9, 0XE7, 0X89,
			0XE1, 0X1B, 0X83, 0X49, 0X4C, 0X3F, 0XF8, 0XFE,
			0X8D, 0X53, 0XAA, 0X90, 0XCA, 0XD8, 0X85, 0X61,
			0X20, 0X71, 0X67, 0XA4, 0X2D, 0X2B, 0X09, 0X5B,
			0XCB, 0X9B, 0X25, 0XD0, 0XBE, 0XE5, 0X6C, 0X52,
			0X59, 0XA6, 0X74, 0XD2, 0XE6, 0XF4, 0XB4, 0XC0,
			0XD1, 0X66, 0XAF, 0XC2, 0X39, 0X4B, 0X63, 0XB6
	};

	const UI8 tetta[] =
	{
		0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
		0x01, 0x09, 0x11, 0x19, 0x21, 0x29, 0x31, 0x39,
		0x02, 0x0a, 0x12, 0x1a, 0x22, 0x2a, 0x32, 0x3a,
		0x03, 0x0b, 0x13, 0x1b, 0x23, 0x2b, 0x33, 0x3b,
		0x04, 0x0c, 0x14, 0x1c, 0x24, 0x2c, 0x34, 0x3c,
		0x05, 0x0d, 0x15, 0x1d, 0x25, 0x2d, 0x35, 0x3d,
		0x06, 0x0e, 0x16, 0x1e, 0x26, 0x2e, 0x36, 0x3e,
		0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37, 0x3f,

	};

	const UI64 A[] = {
		0x8e20faa72ba0b470, 0x47107ddd9b505a38, 0xad08b0e0c3282d1c, 0xd8045870ef14980e,
		0x6c022c38f90a4c07, 0x3601161cf205268d, 0x1b8e0b0e798c13c8, 0x83478b07b2468764,
		0xa011d380818e8f40, 0x5086e740ce47c920, 0x2843fd2067adea10, 0x14aff010bdd87508,
		0x0ad97808d06cb404, 0x05e23c0468365a02, 0x8c711e02341b2d01, 0x46b60f011a83988e,
		0x90dab52a387ae76f, 0x486dd4151c3dfdb9, 0x24b86a840e90f0d2, 0x125c354207487869,
		0x092e94218d243cba, 0x8a174a9ec8121e5d, 0x4585254f64090fa0, 0xaccc9ca9328a8950,
		0x9d4df05d5f661451, 0xc0a878a0a1330aa6, 0x60543c50de970553, 0x302a1e286fc58ca7,
		0x18150f14b9ec46dd, 0x0c84890ad27623e0, 0x0642ca05693b9f70, 0x0321658cba93c138,
		0x86275df09ce8aaa8, 0x439da0784e745554, 0xafc0503c273aa42a, 0xd960281e9d1d5215,
		0xe230140fc0802984, 0x71180a8960409a42, 0xb60c05ca30204d21, 0x5b068c651810a89e,
		0x456c34887a3805b9, 0xac361a443d1c8cd2, 0x561b0d22900e4669, 0x2b838811480723ba,
		0x9bcf4486248d9f5d, 0xc3e9224312c8c1a0, 0xeffa11af0964ee50, 0xf97d86d98a327728,
		0xe4fa2054a80b329c, 0x727d102a548b194e, 0x39b008152acb8227, 0x9258048415eb419d,
		0x492c024284fbaec0, 0xaa16012142f35760, 0x550b8e9e21f7a530, 0xa48b474f9ef5dc18,
		0x70a6a56e2440598e, 0x3853dc371220a247, 0x1ca76e95091051ad, 0x0edd37c48a08a6d8,
		0x07e095624504536c, 0x8d70c431ac02a736, 0xc83862965601dd1b, 0x641c314b2b8ee083
	};
	UI8 C[0xc][0x40] = {
		0x07, 0x45, 0xa6, 0xf2, 0x59, 0x65, 0x80, 0xdd,
		0x23, 0x4d, 0x74, 0xcc, 0x36, 0x74, 0x76, 0x05,
		0x15, 0xd3, 0x60, 0xa4, 0x8, 0x2a, 0x42, 0xa2,
		0x01, 0x69, 0x67, 0x92, 0x91, 0xe0, 0x7c, 0x4b,
		0xfc, 0xc4, 0x85, 0x75, 0x8d, 0xb8, 0x4e, 0x71,
		0x16, 0xd0, 0x45, 0x2e, 0x43, 0x76, 0x6a, 0x2f,
		0x1f, 0x7c, 0x65, 0xc0, 0x81, 0x2f, 0xcb, 0xeb,
		0xe9, 0xda, 0xca, 0x1e, 0xda, 0x5b, 0x8, 0xb1,
		0xb7, 0x9b, 0xb1, 0x21, 0x70, 0x4, 0x79, 0xe6,
		0x56, 0xcd, 0xcb, 0xd7, 0x1b, 0xa2, 0xdd, 0x55,
		0xca, 0xa7, 0xa, 0xdb, 0xc2, 0x61, 0xb5, 0x5c,
		0x58, 0x99, 0xd6, 0x12, 0x6b, 0x17, 0xb5, 0x9a,
		0x31, 0x1, 0xb5, 0x16, 0xf, 0x5e, 0xd5, 0x61,
		0x98, 0x2b, 0x23, 0xa, 0x72, 0xea, 0xfe, 0xf3,
		0xd7, 0xb5, 0x70, 0xf, 0x46, 0x9d, 0xe3, 0x4f,
		0x1a, 0x2f, 0x9d, 0xa9, 0x8a, 0xb5, 0xa3, 0x6f,
		0xb2, 0xa, 0xba, 0xa, 0xf5, 0x96, 0x1e, 0x99,
		0x31, 0xdb, 0x7a, 0x86, 0x43, 0xf4, 0xb6, 0xc2,
		0x9, 0xdb, 0x62, 0x60, 0x37, 0x3a, 0xc9, 0xc1,
		0xb1, 0x9e, 0x35, 0x90, 0xe4, 0xf, 0xe2, 0xd3,
		0x7b, 0x7b, 0x29, 0xb1, 0x14, 0x75, 0xea, 0xf2,
		0x8b, 0x1f, 0x9c, 0x52, 0x5f, 0x5e, 0xf1, 0x6,
		0x35, 0x84, 0x3d, 0x6a, 0x28, 0xfc, 0x39, 0xa,
		0xc7, 0x2f, 0xce, 0x2b, 0xac, 0xdc, 0x74, 0xf5,
		0x2e, 0xd1, 0xe3, 0x84, 0xbc, 0xbe, 0xc, 0x22,
		0xf1, 0x37, 0xe8, 0x93, 0xa1, 0xea, 0x53, 0x34,
		0xbe, 0x3, 0x52, 0x93, 0x33, 0x13, 0xb7, 0xd8,
		0x75, 0xd6, 0x3, 0xed, 0x82, 0x2c, 0xd7, 0xa9,
		0x3f, 0x35, 0x5e, 0x68, 0xad, 0x1c, 0x72, 0x9d,
		0x7d, 0x3c, 0x5c, 0x33, 0x7e, 0x85, 0x8e, 0x48,
		0xdd, 0xe4, 0x71, 0x5d, 0xa0, 0xe1, 0x48, 0xf9,
		0xd2, 0x66, 0x15, 0xe8, 0xb3, 0xdf, 0x1f, 0xef ,
		0x57, 0xfe, 0x6c, 0x7c, 0xfd, 0x58, 0x17, 0x60,
		0xf5, 0x63, 0xea, 0xa9, 0x7e, 0xa2, 0x56, 0x7a,
		0x16, 0x1a, 0x27, 0x23, 0xb7, 0x0, 0xff, 0xdf,
		0xa3, 0xf5, 0x3a, 0x25, 0x47, 0x17, 0xcd, 0xbf,
		0xbd, 0xff, 0xf, 0x80, 0xd7, 0x35, 0x9e, 0x35,
		0x4a, 0x10, 0x86, 0x16, 0x1f, 0x1c, 0x15, 0x7f,
		0x63, 0x23, 0xa9, 0x6c, 0xc, 0x41, 0x3f, 0x9a,
		0x99, 0x47, 0x47, 0xad, 0xac, 0x6b, 0xea, 0x4b,
		0x6e, 0x7d, 0x64, 0x46, 0x7a, 0x40, 0x68, 0xfa,
		0x35, 0x4f, 0x90, 0x36, 0x72, 0xc5, 0x71, 0xbf,
		0xb6, 0xc6, 0xbe, 0xc2, 0x66, 0x1f, 0xf2, 0xa,
		0xb4, 0xb7, 0x9a, 0x1c, 0xb7, 0xa6, 0xfa, 0xcf,
		0xc6, 0x8e, 0xf0, 0x9a, 0xb4, 0x9a, 0x7f, 0x18,
		0x6c, 0xa4, 0x42, 0x51, 0xf9, 0xc4, 0x66, 0x2d,
		0xc0, 0x39, 0x30, 0x7a, 0x3b, 0xc3, 0xa4, 0x6f,
		0xd9, 0xd3, 0x3a, 0x1d, 0xae, 0xae, 0x4f, 0xae,
		0x93, 0xd4, 0x14, 0x3a, 0x4d, 0x56, 0x86, 0x88,
		0xf3, 0x4a, 0x3c, 0xa2, 0x4c, 0x45, 0x17, 0x35,
		0x4, 0x5, 0x4a, 0x28, 0x83, 0x69, 0x47, 0x6,
		0x37, 0x2c, 0x82, 0x2d, 0xc5, 0xab, 0x92, 0x9,
		0xc9, 0x93, 0x7a, 0x19, 0x33, 0x3e, 0x47, 0xd3,
		0xc9, 0x87, 0xbf, 0xe6, 0xc7, 0xc6, 0x9e, 0x39,
		0x54, 0x9, 0x24, 0xbf, 0xfe, 0x86, 0xac, 0x51,
		0xec, 0xc5, 0xaa, 0xee, 0x16, 0xe, 0xc7, 0xf4,
		0x1e, 0xe7, 0x2, 0xbf, 0xd4, 0xd, 0x7f, 0xa4,
		0xd9, 0xa8, 0x51, 0x59, 0x35, 0xc2, 0xac, 0x36,
		0x2f, 0xc4, 0xa5, 0xd1, 0x2b, 0x8d, 0xd1, 0x69,
		0x90, 0x6, 0x9b, 0x92, 0xcb, 0x2b, 0x89, 0xf4,
		0x9a, 0xc4, 0xdb, 0x4d, 0x3b, 0x44, 0xb4, 0x89,
		0x1e, 0xde, 0x36, 0x9c, 0x71, 0xf8, 0xb7, 0x4e,
		0x41, 0x41, 0x6e, 0xc, 0x2, 0xaa, 0xe7, 0x3,
		0xa7, 0xc9, 0x93, 0x4d, 0x42, 0x5b, 0x1f, 0x9b,
		0xdb, 0x5a, 0x23, 0x83, 0x51, 0x44, 0x61, 0x72,
		0x60, 0x2a, 0x1f, 0xcb, 0x92, 0xdc, 0x38, 0xe,
		0x54, 0x9c, 0x7, 0xa6, 0x9a, 0x8a, 0x2b, 0x7b,
		0xb1, 0xce, 0xb2, 0xdb, 0xb, 0x44, 0xa, 0x80,
		0x84, 0x9, 0xd, 0xe0, 0xb7, 0x55, 0xd9, 0x3c,
		0x24, 0x42, 0x89, 0x25, 0x1b, 0x3a, 0x7d, 0x3a,
		0xde, 0x5f, 0x16, 0xec, 0xd8, 0x9a, 0x4c, 0x94,
		0x9b, 0x22, 0x31, 0x16, 0x54, 0x5a, 0x8f, 0x37,
		0xed, 0x9c, 0x45, 0x98, 0xfb, 0xc7, 0xb4, 0x74,
		0xc3, 0xb6, 0x3b, 0x15, 0xd1, 0xfa, 0x98, 0x36,
		0xf4, 0x52, 0x76, 0x3b, 0x30, 0x6c, 0x1e, 0x7a,
		0x4b, 0x33, 0x69, 0xaf, 0x2, 0x67, 0xe7, 0x9f,
		0x3, 0x61, 0x33, 0x1b, 0x8a, 0xe1, 0xff, 0x1f,
		0xdb, 0x78, 0x8a, 0xff, 0x1c, 0xe7, 0x41, 0x89,
		0xf3, 0xf3, 0xe4, 0xb2, 0x48, 0xe5, 0x2a, 0x38,
		0x52, 0x6f, 0x5, 0x80, 0xa6, 0xde, 0xbe, 0xab,
		0x1b, 0x2d, 0xf3, 0x81, 0xcd, 0xa4, 0xca, 0x6b,
		0x5d, 0xd8, 0x6f, 0xc0, 0x4a, 0x59, 0xa2, 0xde,
		0x98, 0x6e, 0x47, 0x7d, 0x1d, 0xcd, 0xba, 0xef,
		0xca, 0xb9, 0x48, 0xea, 0xef, 0x71, 0x1d, 0x8a,
		0x79, 0x66, 0x84, 0x14, 0x21, 0x80, 0x1, 0x20,
		0x61, 0x7, 0xab, 0xeb, 0xbb, 0x6b, 0xfa, 0xd8,
		0x94, 0xfe, 0x5a, 0x63, 0xcd, 0xc6, 0x2, 0x30,
		0xfb, 0x89, 0xc8, 0xef, 0xd0, 0x9e, 0xcd, 0x7b,
		0x20, 0xd7, 0x1b, 0xf1, 0x4a, 0x92, 0xbc, 0x48,
		0x99, 0x1b, 0xb2, 0xd9, 0xd5, 0x17, 0xf4, 0xfa,
		0x52, 0x28, 0xe1, 0x88, 0xaa, 0xa4, 0x1d, 0xe7,
		0x86, 0xcc, 0x91, 0x18, 0x9d, 0xef, 0x80, 0x5d,
		0x9b, 0x9f, 0x21, 0x30, 0xd4, 0x12, 0x20, 0xf8,
		0x77, 0x1d, 0xdf, 0xbc, 0x32, 0x3c, 0xa4, 0xcd,
		0x7a, 0xb1, 0x49, 0x4, 0xb0, 0x80, 0x13, 0xd2,
		0xba, 0x31, 0x16, 0xf1, 0x67, 0xe7, 0x8e, 0x37
	};
}

Hash512::Hash512()
{
	for (size_t i = 0; i < 0x40; i++)
	{
		h[i] = 0;
		N[i] = 0;
		Summ[i] = 0;
	}

	Key_create();
}

UI8* Hash512::give_hash(UI8* text, UI64 length)
{
	UI8 _text[0x40];
	UI64 step = 0;
	//if |M|>=512
	while (length >= 0x200)
	{
		//_text=m
		for (size_t i = 0; i < 0x40; i++)
		{
			_text[i] = text[step * 0x200 + i];
		}



		++step;
		length -= 0x40;
	}

	if(length>0)
	{
		UI8 _text[0x40];

		for (size_t i = 0; i < length/0x8; i++)
		{
			_text[i] = text[step * 0x200 + i];
		}

		if (length % 0x8 == 0)
		{
			_text[length % 0x8] = 0x1;

			for (size_t i = length % 0x8 + 0x1; i < 0x40; i++)
			{
				_text[i] = 0;
			}
		}
		else
		{
			_text[length % 0x8] = text[step * 0x200 + length % 0x8];
		}

	}
	
	return h;
}



void Hash512::xors(UI8* key, UI8* block)
{
	for (size_t i = 0; i < 0x40; i++)
	{
		block[i] ^= key[i];
	}
}

void Hash512::S(UI8* block)
{
	for (unsigned __int8 k = 0; k < 0x40; ++k)
	{
		block[k] = H512::pi[block[k]];
	}
}

void Hash512::P(UI8* block)
{
	UI8 var_block[0x40];

	for (size_t i = 0; i < 0x40; i++)
	{
		var_block[i] = block[H512::tetta[i]];
	}

	for (size_t i = 0; i < 0x40; i++)
	{
		block[i] = var_block[i];
	}
}

void Hash512::L(UI8* block)
{
	for (size_t i = 0; i < 0x8; i++)
	{
		l((UI64*)(block + 0x8 * i));
	}

}

void Hash512::l(UI64* block)
{

	UI64 C = 0;
	for (size_t i = 0; i < 0x40; i++)
	{
		if (*block >> i & 0x1)
			C ^= H512::A[0x3f-i];
	}

	*block = C;
}

void Hash512::Key_create()
{
	for (size_t i = 0; i < 0x40; i++)
	{
		Keys[0][i] = h[i];
	}
	S(Keys[0]);
	P(Keys[0]);
	L(Keys[0]);

	for (size_t i = 0x1; i < 0xd; i++)
	{
		for (size_t j = 0; j < 0x40; j++)
		{
			Keys[i][j] = Keys[i-0x1][j];
		}
		xors(H512::C[i - 0x1], Keys[i]);
		S(Keys[i]);
		P(Keys[i]);
		L(Keys[i]);
	}
}
