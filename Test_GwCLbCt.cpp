#include "Test_GwCLbCt.h"

#define UC unsigned char

Test_GwCLbCt::Test_GwCLbCt()
{
  //push key
  {
    UC key[0x20];

    {
      UC key_r[] =
      {
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff,
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0xfe, 0xdc, 0xba, 0x98,
        0x76, 0x54, 0x32, 0x10,
        0x01, 0x23, 0x45, 0x67,
        0x89, 0xab, 0xcd, 0xef
      };

      for (UC k = 0; k < 0x20; ++k)
        key[k] = key_r[0x1f - k];
    }

    push_key(key);
  }

  //push IV
  {
    UC IV[0x20];

    UC IV_[0x20] =
    {
      0x12, 0x34, 0x56, 0x78,
      0x90, 0xab, 0xce, 0xf0,
      0xa1, 0xb2, 0xc3, 0xd4,
      0xe5, 0xf0, 0x01, 0x12,
      0x23, 0x34, 0x45, 0x56,
      0x67, 0x78, 0x89, 0x90,
      0x12, 0x13, 0x14, 0x15,
      0x16, 0x17, 0x18, 0x19
    };

    for (UC k = 0; k < 0x20; ++k)
      IV[k] = IV_[0x1f - k];

    push_IV(IV);
  }
}

bool Test_GwCLbCt::result_of_testing(bool* mass)
{
  bool result=true;

  if (!(mass[0] = test_C()))
    result = false;
  if (!(mass[0x1] = test_P()))
    result = false;

  return result;
}

bool Test_GwCLbCt::result_of_testing()
{
  bool mass[0x10];

  return result_of_testing(mass);
}

bool Test_GwCLbCt::test_C()
{
  //P1
  {
    UC P1[0x10];

    {
      UC P1_r[] =
      {
        0x11, 0x22, 0x33, 0x44,
        0x55, 0x66, 0x77, 0x00,
        0xff, 0xee, 0xdd, 0xcc,
        0xbb, 0xaa, 0x99, 0x88
      };

      for (UC k = 0; k < 0x10; ++k)
        P1[k] = P1_r[0xf - k];
    }

    Give_ST(P1);

    UC OB[] =
    {
      0x81, 0x80, 0x0a, 0x59,
      0xb1, 0x84, 0x2b, 0x24,
      0xff, 0x1f, 0x79, 0x5e,
      0x89, 0x7a, 0xbd, 0x95
    };

    for (UC k = 0; k < 0x10; ++k)
      if (P1[k] != OB[0xf - k])
        return false;
  }

  //P2
  {
    UC P2[0x10];

    {
      UC P2_r[] =
      {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xee, 0xff, 0x0a
      };

      for (UC k = 0; k < 0x10; ++k)
        P2[k] = P2_r[0xf - k];
    }

    Give_ST(P2);

    UC OB[] =
    {
      0xed, 0x5b, 0x47, 0xa7,
      0x04, 0x8c, 0xfa, 0xb4,
      0x8f, 0xb5, 0x21, 0x36,
      0x9d, 0x93, 0x26, 0xbf
    };

    for (UC k = 0; k < 0x10; ++k)
      if (P2[k] != OB[0xf - k])
        return false;
  }

  //P3
  {
    UC P3[0x10];

    {
      UC P3_r[] =
      {
        0x11, 0x22, 0x33, 0x44,
        0x55, 0x66, 0x77, 0x88,
        0x99, 0xaa, 0xbb, 0xcc,
        0xee, 0xff, 0x0a, 0x00
      };

      for (UC k = 0; k < 0x10; ++k)
        P3[k] = P3_r[0xf - k];
    }

    Give_ST(P3);

    UC OB[] =
    {
      0x79, 0xf2, 0xa8, 0xeb,
      0x5c, 0xc6, 0x8d, 0x38,
      0x84, 0x2d, 0x26, 0x4e,
      0x97, 0xa2, 0x38, 0xb5
    };

    for (UC k = 0; k < 0x10; ++k)
      if (P3[k] != OB[0xf - k])
        return false;
  }

  //P4
  {
    UC P4[0x10];

    {
      UC P4_r[] =
      {
        0x22, 0x33, 0x44, 0x55,
        0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xee,
        0xff, 0x0a, 0x00, 0x11
      };

      for (UC k = 0; k < 0x10; ++k)
        P4[k] = P4_r[0xf - k];
    }

    Give_ST(P4);

    UC OB[] =
    {
      0x4f, 0xfe, 0xbe, 0xcd,
      0x4e, 0x92, 0x2d, 0xe6,
      0xc7, 0x5b, 0xd9, 0xdd,
      0x44, 0xfb, 0xf4, 0xd1
    };

    for (UC k = 0; k < 0x10; ++k)
      if (P4[k] != OB[0xf - k])
        return false;
  }


  return true;
}

bool Test_GwCLbCt::test_P()
{
  //repush IV
  {
    UC IV[0x20];

    UC IV_[0x20] =
    {
      0x12, 0x34, 0x56, 0x78,
      0x90, 0xab, 0xce, 0xf0,
      0xa1, 0xb2, 0xc3, 0xd4,
      0xe5, 0xf0, 0x01, 0x12,
      0x23, 0x34, 0x45, 0x56,
      0x67, 0x78, 0x89, 0x90,
      0x12, 0x13, 0x14, 0x15,
      0x16, 0x17, 0x18, 0x19
    };

    for (UC k = 0; k < 0x20; ++k)
      IV[k] = IV_[0x1f - k];

    push_IV(IV);
  }

  //Ñ1
  {
    UC C1[0x10];

    {
      UC C1_r[] =
      {
        0x81, 0x80, 0x0a, 0x59,
        0xb1, 0x84, 0x2b, 0x24,
        0xff, 0x1f, 0x79, 0x5e,
        0x89, 0x7a, 0xbd, 0x95
      };

      for (UC k = 0; k < 0x10; ++k)
        C1[k] = C1_r[0xf - k];
    }

    Give_OT(C1);

    UC OB[] =
    {
      0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x00,
      0xff, 0xee, 0xdd, 0xcc,
      0xbb, 0xaa, 0x99, 0x88
    };

    for (UC k = 0; k < 0x10; ++k)
      if (C1[k] != OB[0xf - k])
        return false;
  }

  //C2
  {
    UC C2[0x10];

    {
      UC C2_r[] =
      {
        0xed, 0x5b, 0x47, 0xa7,
        0x04, 0x8c, 0xfa, 0xb4,
        0x8f, 0xb5, 0x21, 0x36,
        0x9d, 0x93, 0x26, 0xbf
        
      };

      for (UC k = 0; k < 0x10; ++k)
        C2[k] = C2_r[0xf - k];
    }

    Give_OT(C2);

    UC OB[] =
    {
      0x00, 0x11, 0x22, 0x33,
      0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb,
      0xcc, 0xee, 0xff, 0x0a
    };

    for (UC k = 0; k < 0x10; ++k)
      if (C2[k] != OB[0xf - k])
        return false;
  }

  //C3
  {
    UC C3[0x10];

    {
      UC C3_r[] =
      {
        0x79, 0xf2, 0xa8, 0xeb,
        0x5c, 0xc6, 0x8d, 0x38,
        0x84, 0x2d, 0x26, 0x4e,
        0x97, 0xa2, 0x38, 0xb5        
      };

      for (UC k = 0; k < 0x10; ++k)
        C3[k] = C3_r[0xf - k];
    }

    Give_ST(C3);

    UC OB[] =
    {
      0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x88,
      0x99, 0xaa, 0xbb, 0xcc,
      0xee, 0xff, 0x0a, 0x00
    };

    for (UC k = 0; k < 0x10; ++k)
      if (C3[k] != OB[0xf - k])
        return false;
  }

  //C4
  {
    UC C4[0x10];

    {
      UC C4_r[] =
      {
        0x4f, 0xfe, 0xbe, 0xcd,
        0x4e, 0x92, 0x2d, 0xe6,
        0xc7, 0x5b, 0xd9, 0xdd,
        0x44, 0xfb, 0xf4, 0xd1
        
      };

      for (UC k = 0; k < 0x10; ++k)
        C4[k] = C4_r[0xf - k];
    }

    Give_ST(C4);

    UC OB[] =
    {
      0x22, 0x33, 0x44, 0x55,
      0x66, 0x77, 0x88, 0x99,
      0xaa, 0xbb, 0xcc, 0xee,
      0xff, 0x0a, 0x00, 0x11
    };

    for (UC k = 0; k < 0x10; ++k)
      if (C4[k] != OB[0xf - k])
        return false;
  }


  return true;
}
